// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql" // Change to "postgresql" if using PostgreSQL
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   PLAYER
//   SCOUT
//   CLUB
// }

// enum ConnectionStatus {
//   PENDING
//   ACCEPTED
//   REJECTED
// }

// model User {
//   id            String   @id @default(uuid())
//   email         String   @unique
//   name          String?
//   profileImage  String? 
//   role          Role
//   bio           String?
//   preferredFoot String? // Left, Right, Both
//   stats         Json?   // Store stats as JSON (e.g., goals, assists)
//   formerClub    String?
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt()

//   // Relationships
//   posts         Post[]
//   comments      Comment[]
//   sentConnections    Connection[] @relation("SentConnections")
//   receivedConnections Connection[] @relation("ReceivedConnections")
//   messagesSent   Message[] @relation("MessageSender")
//   messagesReceived Message[] @relation("MessageReceiver")
//   notifications  Notification[]
// }

// model Post {
//   id        String   @id @default(uuid())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   content   String?
//   imageUrl  String?
//   likes     Int      @default(0)
//   comments  Comment[]
//   createdAt DateTime @default(now())

//   @@index([userId])
// }

// model Comment {
//   id        String   @id @default(uuid())
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   content   String
//   createdAt DateTime @default(now())

//   @@index([postId])
//   @@index([userId])
// }

// model Connection {
//   id            String @id @default(uuid())
//   senderId      String
//   receiverId    String
//   status        ConnectionStatus @default(PENDING)
//   createdAt     DateTime @default(now())

//   sender        User   @relation(name: "SentConnections", fields: [senderId], references: [id], onDelete: Cascade)
//   receiver      User   @relation(name: "ReceivedConnections", fields: [receiverId], references: [id], onDelete: Cascade)

//   @@unique([senderId, receiverId]) // Prevent duplicate requests
// }

// model Message {
//   id          String   @id @default(uuid())
//   senderId    String
//   receiverId  String
//   content     String
//   createdAt   DateTime @default(now())

//   sender      User     @relation(name: "MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
//   receiver    User     @relation(name: "MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

//   @@index([senderId])
//   @@index([receiverId])
// }

// model Notification {
//   id        String   @id @default(uuid())
//   userId    String
//   type      String   // "CONNECTION_REQUEST", "MESSAGE", "POST_LIKE", etc.
//   content   String
//   isRead    Boolean  @default(false)
//   createdAt DateTime @default(now())

//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "postgresql" if using PostgreSQL
  url      = env("DATABASE_URL")
}

enum Role {
  PLAYER
  SCOUT
  CLUB
  NONE
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id            String   @id @default(uuid())
  clerkId String @unique
  email         String   @unique
  fullName          String?
  profileImageUrl  String? 
  role          Role @default(NONE)
  bio           String?
  preferredFoot String? // Left, Right, Both
  formerClub    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  // Relationships
  posts         Post[]
  comments      Comment[]
  sentConnections    Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  messagesSent   Message[] @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")
  notifications  Notification[]
  stats         Stat[] // Linked to a new model instead of JSON
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String?
  imageUrl  String?
  likes     Int      @default(0)
  comments  Comment[]
  createdAt DateTime @default(now())

  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Connection {
  id            String @id @default(uuid())
  senderId      String
  receiverId    String
  status        ConnectionStatus @default(PENDING)
  createdAt     DateTime @default(now())

  sender        User   @relation(name: "SentConnections", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User   @relation(name: "ReceivedConnections", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId]) // Prevent duplicate requests
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  content     String
  createdAt   DateTime @default(now())

  sender      User     @relation(name: "MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation(name: "MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // "CONNECTION_REQUEST", "MESSAGE", "POST_LIKE", etc.
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Stat {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals     Int      @default(0)
  assists   Int      @default(0)
  matches   Int      @default(0)
  minutes   Int      @default(0)
  createdAt DateTime @default(now())

  @@index([userId])
}
